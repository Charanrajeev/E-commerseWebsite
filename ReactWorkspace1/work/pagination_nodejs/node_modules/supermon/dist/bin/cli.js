#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const fs_1 = require("fs");
const path_1 = require("path");
const update_notifier_1 = __importDefault(require("update-notifier"));
const index_1 = __importDefault(require("../lib/index"));
const loadPackageJSON_1 = __importDefault(require("../lib/modules/loadPackageJSON"));
const pckg = loadPackageJSON_1.default(path_1.join(__dirname, '..', '..', 'package.json'));
const argv = yargs_1.default
    .parserConfiguration({
    'unknown-options-as-args': true, // Make sure to pass all unknown options to the command
})
    .env('SUPERMON')
    .config('config', 'Path to JSON config file', (filename) => {
    // Try reading potential config file
    let stringConfig = '';
    if (filename && fs_1.existsSync(filename)) {
        stringConfig = fs_1.readFileSync(filename, { encoding: 'utf8' });
    }
    else if (fs_1.existsSync('nodemon.json')) {
        // If no config was found, try reading nodemon.json as well
        stringConfig = fs_1.readFileSync('nodemon.json', { encoding: 'utf8' });
    }
    // Try parsing the loaded file
    let config = {};
    if (stringConfig) {
        try {
            config = JSON.parse(stringConfig);
        }
        catch (err) {
            console.error('Error parsing JSON configuration:', err.toString());
            console.error('Try using a JSON validator.');
            process.exit(1);
        }
    }
    return config;
})
    .default('config', 'supermon.json')
    .pkgConf('supermon')
    .pkgConf('nodemonConfig') // If supermon config is not find, try nodemon instead
    .option('watch', {
    describe: 'Directory to watch for file changes',
    default: '.',
    type: 'string',
    alias: 'w',
})
    .option('ext', {
    describe: 'Comma separated list of file extensions to watch',
    type: 'string',
    array: true,
    alias: 'e',
})
    .option('ignore', {
    describe: 'Directories to ignore for file changes',
    type: 'string',
    array: true,
    alias: 'i',
})
    .option('delay', {
    describe: 'How many ms to wait after file changes',
    default: 1000,
    type: 'number',
})
    .option('exec', {
    describe: 'Executable to run the command on',
    type: 'string',
    alias: 'x',
})
    .option('legacywatch', {
    describe: 'Use polling instead of FS events',
    type: 'boolean',
    alias: ['L', 'legacy-watch'],
})
    .option('pmexec', {
    describe: 'Package manager executable to use',
    default: 'npm',
    type: 'string',
})
    .option('skipfirstsync', {
    describe: "Don't do full sync on first run",
    type: 'boolean',
})
    .version(true) // Set custom version option to avoid "[boolean]" flag in help
    .option('version', {
    describe: 'Show version number',
    type: 'boolean',
})
    .help(false) // Set custom help option to avoid "[boolean]" flag in help
    .option('help', {
    describe: 'Show help',
    type: 'boolean',
})
    .option('debug', {
    describe: 'Show debug information',
    type: 'boolean',
    alias: ['V', 'verbose'],
});
// Show help and version manually
if (yargs_1.default.argv.version) {
    const packageJsonString = fs_1.readFileSync(path_1.join(__dirname, '../../package.json'), { encoding: 'utf8' });
    const packageJson = JSON.parse(packageJsonString);
    console.log(packageJson.version);
    process.exit(); /* eslint-disable-line no-process-exit */
}
if (yargs_1.default.argv.help) {
    yargs_1.default.showHelp('log');
    console.log('');
    console.log('Note: If both, supermon and application arguments are provided, it is recommended');
    console.log('      to use "--" as separator between supermon and application command & arguments.');
    console.log('      Example: "supermon --delay=2000 -- app.js --port=80"');
    console.log('');
    console.log('Note: Boolean options do not require value to be specified');
    console.log('');
    console.log('Example use: "supermon app.js"');
    console.log('Example use: "supermon --delay=2000 -- app.js --port=80"');
    process.exit(); /* eslint-disable-line no-process-exit */
}
// Set update-notifier
if (pckg) {
    update_notifier_1.default({
        pkg: pckg,
    });
}
const { argv: args } = argv;
// args.legacywatch = args.legacyWatch || args.legacywatch;
let exec = args.exec || 'node';
let command = args._.join(' ');
let ext = args.ext || ['js', 'mjs', 'jsx', 'json'];
// Handle TypeScript commands
if (path_1.extname(command) === '.ts') {
    exec = 'ts-node';
    ext = ext || ['ts', 'tsx', 'json'];
}
// Handle NPM script as command
if (command.match(/^npm /)) {
    exec = 'npm';
    command = command.replace('npm ', '');
}
index_1.default({
    debug: args.debug,
    delay: args.delay,
    command,
    ext,
    exec,
    pmExec: args.pmexec,
    ignore: args.ignore,
    legacywatch: args.legacywatch,
    skipFirstSync: args.skipfirstsync,
    watch: args.watch,
});
