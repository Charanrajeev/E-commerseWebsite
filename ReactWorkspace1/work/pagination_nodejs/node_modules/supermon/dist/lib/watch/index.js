"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chokidar_1 = require("chokidar");
const EventBus_1 = require("../EventBus");
const logger_1 = __importDefault(require("../logger/logger"));
let watcher;
let isEnabled = true;
const watch = ({ eventBus, cwd = '.', polling = false, extensions = ['js', 'mjs', 'json'], ignore = [], delay = 200, }) => {
    let debounceTimer;
    const defaultIgnore = ['./node_modules', './docs', './git'];
    // Watch for file changes
    const watchPatterns = (extensions || []).map((ext) => `**/*.${ext}`);
    const ignorePatterns = [...ignore, ...defaultIgnore];
    watcher = chokidar_1.watch(watchPatterns, {
        cwd,
        ignored: ignorePatterns,
        usePolling: polling,
    });
    watcher.on('change', () => {
        // Don't send events to the event emitter if watcher is disabled
        if (isEnabled) {
            // Debounce repeating events
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                logger_1.default.prefix();
                logger_1.default.prefix('File change(s) detected. Restarting child process...');
                logger_1.default.prefix();
                eventBus.emit(EventBus_1.WatchEvents.FilesChanged);
            }, delay);
        }
    });
    // Set events to enable/disable the watcher
    eventBus.on(EventBus_1.WatchEvents.Enable, () => { isEnabled = true; });
    eventBus.on(EventBus_1.WatchEvents.Disable, () => {
        clearTimeout(debounceTimer);
        isEnabled = false;
    });
    eventBus.on(EventBus_1.WatchEvents.Stop, () => {
        watcher.close();
        eventBus.emit(EventBus_1.WatchEvents.Stopped);
    });
};
exports.default = watch;
