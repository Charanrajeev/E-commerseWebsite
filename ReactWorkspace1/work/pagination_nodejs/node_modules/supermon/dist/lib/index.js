"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tree_kill_1 = __importDefault(require("tree-kill"));
const fs_1 = require("fs");
const path_1 = require("path");
const modules_1 = __importDefault(require("./modules"));
const watch_1 = __importDefault(require("./watch"));
const child_1 = require("./child");
const EventBus_1 = __importStar(require("./EventBus"));
const logger_1 = __importDefault(require("./logger/logger"));
const loadPackageJSON_1 = __importDefault(require("./modules/loadPackageJSON"));
let isStarted = false;
let isBeingKilled = false;
const pckg = loadPackageJSON_1.default(path_1.join(__dirname, '..', '..', 'package.json'));
if (!pckg) {
    throw new Error('Failed to load module package.json');
}
/**
 * Setup main process
 *
 * Set sensible defaults
 */
exports.default = ({ command, debug = false, delay = 200, exec = 'node', ext = ['js', 'mjs', 'jsx', 'json'], legacywatch = false, logging = true, skipFirstSync = false, pmExec = 'npm', watch: watchdir = '.', ignore = [], }) => {
    const eventBus = new EventBus_1.default({
        debug,
    });
    if (!fs_1.existsSync(watchdir)) {
        throw new Error(`Path "${watchdir}" does not exist.`);
    }
    // Enable/disable logger
    logger_1.default.enabled(logging);
    const props = {
        command,
        delay,
        exec,
        ext,
        legacywatch,
        watch: watchdir,
    };
    eventBus.emit(EventBus_1.ProcessEvents.Start, props);
    // Setup watcher
    watch_1.default({
        eventBus,
        cwd: watchdir,
        extensions: ext,
        delay,
        ignore,
        polling: legacywatch,
    });
    eventBus.on(EventBus_1.WatchEvents.FilesChanged, () => {
        // Only start emitting watch events once the child process is running
        if (isStarted) {
            eventBus.emit(EventBus_1.ModulesEvents.Install);
        }
    });
    // Setup module handler
    modules_1.default({
        eventBus,
        firstRunSync: !skipFirstSync,
        pmExec,
    });
    eventBus.on(EventBus_1.ModulesEvents.Install, () => {
        eventBus.emit(EventBus_1.WatchEvents.Disable);
    });
    eventBus.on(EventBus_1.ModulesEvents.Installed, () => {
        eventBus.emit(EventBus_1.WatchEvents.Enable);
        // Only trigger restart if child process has been started already
        if (isStarted) {
            isStarted = false;
            eventBus.emit(EventBus_1.ChildEvents.Restart);
        }
        else {
            eventBus.emit(EventBus_1.ChildEvents.Start);
        }
    });
    // Setup the requested command
    child_1.childProcess({
        eventBus,
        command: `${exec} ${command}`,
    });
    eventBus.on(EventBus_1.ChildEvents.Started, () => {
        isStarted = true;
        isBeingKilled = false;
    });
    eventBus.on(EventBus_1.ChildEvents.Stopped, (code) => {
        isStarted = false;
        // If we exited succesfully or we are getting killed, stop event watcher
        if (code === 0 || isBeingKilled) {
            eventBus.emit(EventBus_1.WatchEvents.Stop);
        }
    });
    // Start with install
    eventBus.emit(EventBus_1.ModulesEvents.Install);
    eventBus.on(EventBus_1.ChildEvents.Stop, () => {
        isBeingKilled = true;
    });
    eventBus.on(EventBus_1.ChildEvents.Stopped, () => {
        logger_1.default.prefix('Child process exited.');
    });
    logger_1.default.prefix();
    logger_1.default.prefix(`v${pckg.version}`);
    logger_1.default.prefix(`Child process: ${exec} ${command}`);
    logger_1.default.prefix(`Watching directory: ${watchdir}`);
    logger_1.default.prefix(`Watching extensions: ${ext === null || ext === void 0 ? void 0 : ext.join(',')}`);
    logger_1.default.prefix(`Watch delay: ${delay}ms`);
    if (legacywatch) {
        logger_1.default.prefix('Using legacywatch');
    }
    logger_1.default.prefix();
    return eventBus;
};
// On process exit, make sure to kill the whole tree
process.on('exit', () => {
    tree_kill_1.default(process.pid, 'SIGTERM');
});
