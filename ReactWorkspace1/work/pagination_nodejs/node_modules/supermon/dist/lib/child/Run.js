"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Run = exports.Events = void 0;
const child_process_1 = require("child_process");
const tree_kill_1 = __importDefault(require("tree-kill"));
const EventBus_1 = __importDefault(require("../EventBus"));
const logger_1 = __importDefault(require("../logger/logger"));
var Events;
(function (Events) {
    Events["Start"] = "RUN_START";
    Events["Started"] = "RUN_STARTED";
    Events["Stop"] = "RUN_STOP";
    Events["Stopped"] = "RUN_STOPPED";
    Events["Log"] = "RUN_LOG";
})(Events = exports.Events || (exports.Events = {}));
class Run {
    constructor({ command, cwd, prefixLogs = false, autostart = true, debug = false, }) {
        this.pid = 0;
        this.Events = Events;
        this.command = command;
        this.cwd = cwd;
        this.prefixLogs = prefixLogs;
        this.eventBus = new EventBus_1.default({
            debug,
        });
        this.eventBus.on(this.Events.Stop, (() => {
            if (!this.pid) {
                throw new Error("Can't kill child process, no process is running.");
            }
            else {
                tree_kill_1.default(this.pid, 'SIGTERM');
            }
        }));
        if (autostart) {
            this.eventBus.emit(this.Events.Start);
        }
        this.eventBus.on(this.Events.Start, () => {
            this.start();
        });
    }
    isRunning() {
        return this.pid !== 0;
    }
    log(message) {
        if (this.prefixLogs) {
            logger_1.default.prefix(message);
        }
        else {
            logger_1.default.log(message);
        }
    }
    start() {
        // Start child process
        const child = child_process_1.spawn(this.command, {
            cwd: this.cwd,
            shell: true,
            stdio: 'pipe',
        });
        this.pid = child.pid;
        // Log process output
        if (this.prefixLogs) {
            logger_1.default.prefixStream(child.stdout);
            logger_1.default.prefixStream(child.stderr);
        }
        else {
            logger_1.default.logStream(child.stdout);
            logger_1.default.logStream(child.stderr);
        }
        // When child exists, send corresponding event to eventbus
        child.on('close', (code) => {
            if (this.pid) {
                this.pid = 0;
                this.eventBus.emit(this.Events.Stopped, code);
            }
        });
        // Notify eventbus that child has started when everything is set
        this.eventBus.emit(this.Events.Started);
    }
}
exports.Run = Run;
