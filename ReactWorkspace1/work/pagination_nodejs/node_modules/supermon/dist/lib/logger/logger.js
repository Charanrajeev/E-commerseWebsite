"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
let isEnabled = true;
/**
 * Log message
 *
 * @param hasPrefix Does the message have prefix
 * @param message Log message
 */
const logFnc = (hasPrefix, message) => {
    if (isEnabled) {
        const logPrefix = (hasPrefix ? `[${chalk_1.grey('supermon')}] ` : '');
        if (message) {
            console.log(`${logPrefix}${message}`);
        }
        else {
            console.log('');
        }
    }
};
/**
 * Log lines from stream
 *
 * @param hasPrefix Do lines have prefix
 * @param stream Log stream
 */
const streamFnc = (hasPrefix, stream) => {
    let buffer = '';
    stream.on('data', (chunk) => {
        buffer += chunk;
        // Log completed lines out
        const lines = buffer.split('\n');
        while (lines.length > 1) {
            const line = lines.shift();
            logFnc(hasPrefix, line);
        }
        // Set last piece as new buffer
        buffer = lines.shift();
    });
    stream.on('end', () => {
        // When stdout ends, log out remaining buffer
        if (buffer) {
            logFnc(hasPrefix, buffer);
        }
    });
};
/**
 * Enable/disable logging
 *
 * @param newIsEnabled Enabled
 */
const enabled = (newIsEnabled) => {
    isEnabled = newIsEnabled;
};
/**
 * Log message with prefix
 *
 * @param message Log message
 */
const prefix = (message) => {
    logFnc(true, message);
};
/**
 * Log lines from log stream with prefix
 *
 * @param stream Log stream
 */
const prefixStream = (stream) => {
    streamFnc(true, stream);
};
/**
 * Log message
 *
 * @param message Log message
 */
const log = (message) => {
    logFnc(false, message);
};
/**
 * Log lines from log stream
 *
 * @param stream Log stream
 */
const logStream = (stream) => {
    streamFnc(false, stream);
};
exports.default = {
    enabled,
    prefix,
    prefixStream,
    log,
    logStream,
};
