/// <reference types="node" />
import EventEmitter from 'events';
export declare type EventBusProps = {
    /**
     * Log events out
     */
    debug?: boolean;
};
export declare enum ProcessEvents {
    Start = "PROCESS_START"
}
export declare enum ChildEvents {
    Start = "CHILD_START",
    Started = "CHILD_STARTED",
    Restart = "CHILD_RESTART",
    Restarted = "CHILD_RESTARTED",
    Stop = "CHILD_STOP",
    Stopped = "CHILD_STOPPED"
}
export declare enum ModulesEvents {
    Install = "MODULES_INSTALL",
    Installing = "MODULES_INSTALLING",
    Installed = "MODULES_INSTALLED"
}
export declare enum WatchEvents {
    Start = "WATCH_START",
    FilesChanged = "WATCH_FILESCHANGED",
    Enable = "WATCH_ENABLE",
    Disable = "WATCH_DISABLE",
    Stop = "WATCH_STOP",
    Stopped = "WATCH_STOPPED"
}
export default class EventBus extends EventEmitter {
    private debug;
    constructor({ debug, }?: EventBusProps);
    emit(event: string, ...args: any[]): boolean;
}
